#this file is mostly copied from https://docs.travis-ci.com/user/languages/python/
#it contains the information for automated testing on Github

#this is a python project, designed to be compatible with 3.6+
language: python

# cache pip
cache:
  directories:
    - $HOME/.cache/pip #linux
    - $HOME/Library/Caches/pip #macosx
    - $HOME/AppData/Local/pip/Cache #windows
    - $HOME/upx #upx

#default VM settings
dist: bionic
python: "3.7"
env:
  global:
    - PYTHON_EXECUTABLE="python"
    - UPX_VERSION="3.95"
    - GR_CLI_VERSION="1.3.0"
    - REGEX="^([-\w]*)([.]|$)([\d]|exe|$)([.]|$)([\d]+|$)([-[:alpha:].]+|$)"
    - DEPLOYMENT="travis"
#    - DEPLOYMENT="github-releaser-cli"

# upgrade pip
# install pillow, numpy for app
# install pyinstaller, regex for distilling
# 4 Step
install:
  - ${PYTHON_EXECUTABLE} --version
  #install python dependencies
  # windows uses pip
  # linux & macosx use pip3
  - "if [ \"${TRAVIS_OS_NAME}\" == \"windows\" ]; then \
      pip --version; \
      pip install -r \"./app_resources/meta/manifests/pip_requirements.txt\"; \
      pip install regex; \
    else \
 	    pip3 --version; \
	    pip3 install -U wheel; \
      pip3 install -r \"./app_resources/meta/manifests/pip_requirements.txt\"; \
    fi"
  #default deployment is yes
  - export DEPLOY=yes
  #default pages deployment is no
  - export DEPLOY_PAGES=no

# 5 Step
jobs:
  include:
    # 3.7 on Bionic Test
    - &tests
      stage: "Unit Tests"
      name: "Python 3.7 on Ubuntu Bionic: Test"
      dist: bionic
      python: "3.7"
      services: xvfb #needs a screen for tkinter
      # 6 Step
      before_script: echo "#do nothing before script"
      # 7 Step
      script: ${PYTHON_EXECUTABLE} tests.py

    # 3.7 on Bionic Build/Deploy
    - &build-deploy
      stage: "Build/Deploy Binaries; Deploy GitHub Pages"
      name: "3.7 on Bionic: Build/Deploy"
      dist: bionic
      python: "3.7"
      services: xvfb #needs a screen for tkinter
      # 3 Step
      before_install: sudo apt-get install pcregrep #get special regex stuff
      skip_cleanup: true
      # 7 Step
      script:
        #run upx script
        # upx still doesn't quite work with race conditions of downloading vs processing
        # try to beat the race condition by having all this in one line
        #run build script
#        - "if [ true ]; then \
#            if [ \"${TRAVIS_DIST}\" != \"xenial\" ]; then \
#              bash ./scripts/get_upx.sh; \
#            fi; \
#            ${PYTHON_EXECUTABLE} build.py; \
#            ls; \
#          fi"
        - ${PYTHON_EXECUTABLE} build.py
      # 9 Step
      after_success:
        #if no tag was submitted, let's build one
        #current: <major>.<minor>.<build_number>
        - "if [ \"${TRAVIS_TAG}\" == \"\" ]; then \
            APP_VERSION=$(head -n 1 ./app_resources/meta/manifests/app_version.txt); \
            export TRAVIS_TAG=\"${APP_VERSION}.${TRAVIS_BUILD_NUMBER}\"; \
          fi; \
          echo \"${TRAVIS_TAG}\" > ./app_resources/meta/manifests/app_version.txt"
        #prepare files to upload
        - bash ./scripts/after_success.sh

      # 10 Step
      before_deploy:
        #set up stuff for both deployment routes
        #global var set at top to indicate which route to use
        #each route has dis/advantages
        #now that we have the tag sorted, set it in git
        - export TRAVIS_TAG="v${TRAVIS_TAG}"
        - export RELEASE_NAME="SpriteSomething ${TRAVIS_TAG}"
        - export FILES=../deploy/* #deploy archive
        - export PAGES=../pages #deploy pages
        - git tag $TRAVIS_TAG
        #if we're using GitHub Releaser CLI
        # download,install,setup app
        # set oauth token properly
        # set body for release since we can do that
        #else, set body as a hyperlink to RELEASENOTES.md
        - "if [ \"${DEPLOYMENT}\" == \"github-releaser-cli\" ]; then \
            RFILE=\"github-releaser-travis\"; \
            if [ \"${TRAVIS_OS_NAME}\" == \"osx\" ]; then \
              RFILE=\"${RFILE}-mac\"; \
            elif [ \"${TRAVIS_OS_NAME}\" == \"windows\" ]; then \
              RFILE=\"${RFILE}.exe\"; \
            fi; \
            RELEASER=${RFILE}; \
            curl https://miketrethewey.github.io/github-release-cli/v${GR_CLI_VERSION}/${RELEASER} -L --output github-releaser && chmod +x github-releaser; \
            export GITHUB_OAUTH_TOKEN=${GITHUB_DEPLOY_KEY}; \
            export BODY=$(cat < ./RELEASENOTES.md); \
          elif [ \"${DEPLOYMENT}\" == \"travis\" ]; then \
            export BODY=\"Please see [RELEASENOTES.md](https://github.com/${TRAVIS_REPO_SLUG}/blob/${TRAVIS_TAG}/RELEASENOTES.md) for description.\"; \
          else \
            export BODY=\"\"; \
          fi;"
        #output actual deployment info
        - "echo \"Deploy:          ${DEPLOY}\"; \
          echo \"Deploy Pages:    ${DEPLOY_PAGES}\"; \
          echo \"Files to Upload: ${FILES}\"; \
          echo \"GHPages Staging: ${PAGES}\"; \
          echo \"Release Name:    ${RELEASE_NAME}\"; \
          echo \"Git tag:         ${TRAVIS_TAG}\""

# Travis CI GitHub Releases provider
      # 11 Step
      deploy:
        - provider: releases
          api_key:
            secure: ${GITHUB_DEPLOY_KEY}
          name: ${RELEASE_NAME}
          body: ${BODY}
          file_glob: true
          file: ${FILES}
          skip_cleanup: true
          draft: true
          on:
            repo: Artheau/SpriteSomething
            condition: $DEPLOY == "yes"
            branch: master
# Travis CI GitHub Pages provider
        - provider: pages
          local_dir: ${PAGES}
          skip_cleanup: true
          github_token: ${GITHUB_DEPLOY_KEY}
          keep_history: true
          on:
            repo: Artheau/SpriteSomething
            condition: $DEPLOY_PAGES == "yes"
            branch: master

# GitHub Release CLI
#  waiting on lindell/github-release-cli#3
#  expected: 1 release with provided release body with 3 binaries
#  actual: 3 releases with provided release body with 1 binary each
#      deploy:
#        provider: script
#        script: ./github-releaser -draft -verbose
#        skip_cleanup: true
#        draft: true
#        on:
#          repo: Artheau/SpriteSomething
#          condition: $DEPLOY == "yes"
#          branch: master

    # 3.7 on Xenial
    - <<: *tests
      name: "Python 3.7 on Ubuntu Xenial: Test"
      dist: xenial
      python: "3.7"
      services: xvfb #needs a screen for tkinter
    - <<: *build-deploy
      name: "3.7 on Xenial: Build/No Deploy"
      dist: xenial
      python: "3.7"
      services: xvfb #needs a screen for tkinter
      # 6 Step
      before_script:
        #cancel GHReleases deploy
        # print value for confirmation
        - "export DEPLOY=no"
        - "echo \"Deploy: ${DEPLOY}\""

    # 3.6 on Xenial
    - <<: *tests
      name: "Python 3.6 on Ubuntu Xenial: Test"
      dist: xenial
      python: "3.6"
      services: xvfb #needs a screen for tkinter
    - <<: *build-deploy
      name: "3.6 on Xenial: Build/No Deploy"
      dist: xenial
      python: "3.6"
      services: xvfb #needs a screen for tkinter
      # 6 Step
      before_script:
        #cancel deploy
        # print value for confirmation
        - "export DEPLOY=no"
        - "echo \"Deploy: ${DEPLOY}\""

    # 3.7 on macOS
    - <<: *tests
      name: "Python 3.7 on MacOSX 10.14 xcode 10.2: Test"
      os: osx
      osx_image: xcode10.2
      python: "3.7"
      services: #cancel services
      language: shell #'language: python' breaks on Travis CI macOSX
      # 3 Step
      before_install:
        #macosx uses python3
        - export PYTHON_EXECUTABLE=python3
    - <<: *build-deploy
      name: "3.7 on MacOSX: Build/Deploy/Pages"
      os: osx
      osx_image: xcode10.2
      python: "3.7"
      services: #cancel services
      language: shell #'language: python' breaks on Travis CI macOSX
      # 3 Step
      before_install:
        #macosx uses python3
        - export PYTHON_EXECUTABLE=python3
      # 6 Step
      before_script:
        #enable GHPages deploy
        # print value for confirmation
        - "export DEPLOY_PAGES=yes"
        - "echo \"Deploy Pages: ${DEPLOY_PAGES}\""

    # 3.7 on Windows
    # Windows VMs currently are slow
    - <<: *tests
      name: "Python 3.7 on Windows 10 v1803: Test"
      os: windows
      python: "3.7"
      services: xvfb #needs a screen for tkinter
      language: shell #'language: python' breaks on Travis CI Windows
      # 3 Step
      before_install:
        #install python
        #set python path
        #get pip
        #install pip
        #install more windows dependences
        - choco install python
        - export PATH=/c/Python37:/c/Python37/Scripts:$PATH
        - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        - ${PYTHON_EXECUTABLE} get-pip.py
        - ${PYTHON_EXECUTABLE} -m pip install --upgrade pip
        - bash ./scripts/win-before_install.sh
    - <<: *build-deploy
      name: "3.7 on Windows: Build/Deploy"
      os: windows
      python: "3.7"
      services: xvfb #needs a screen for tkinter
      language: shell #'language: python' breaks on Travis CI Windows
      # 3 Step
      before_install:
        #install python
        #set python path
        #get pip
        #install pip
        #install more windows dependences
        - choco install python
        - export PATH=/c/Python37:/c/Python37/Scripts:$PATH
        - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        - ${PYTHON_EXECUTABLE} get-pip.py
        - ${PYTHON_EXECUTABLE} -m pip install --upgrade pip
        - bash ./scripts/win-before_install.sh

#nobody wants emails
notifications:
  email: false
